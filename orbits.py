import numpy as np
try:
    import cupy as cp
    from cupy import asnumpy
except ImportError:
    import numpy as cp
    asnumpy = cp.asarray
from tqdm import tqdm
from typing import Tuple
from utils import eprint
from math import prod


def identify_orbits(tensor_shape: Tuple, symmetry_group: np.ndarray, verbose=2) -> np.ndarray:
    """
    Identify orbits from the action of a symmetry generated by a permutation group on the indices of a tensor.
    Faster but higher memory usage than the alternative implementation.

    The permutation group is given as a list of all permutations, where the first permutation is the identity.
    """
    assert np.array_equal(np.asarray(symmetry_group[0]), np.arange(len(tensor_shape))), "The first permutation must be the identity."
    all_perms = cp.asarray(symmetry_group[1:])
    n_nontrivial_perms = len(all_perms)
    total_elements = prod(tensor_shape)
    np_dtype = cp.min_scalar_type(total_elements)
    paradigm = cp.arange(total_elements, dtype=np_dtype).reshape(tensor_shape)
    alternatives = cp.empty(shape=(n_nontrivial_perms, total_elements), dtype=np_dtype)
    if verbose >= 2:
        eprint("Now exploring the consequences of the permutations")
    for i, perm in tqdm(
        enumerate(all_perms), 
        total=n_nontrivial_perms,
        disable=not verbose):
        perm_as_tuple = tuple([int(i) for i in perm])
        alternatives[i] = cp.transpose(paradigm, axes=perm_as_tuple).reshape(-1)
    # del paradigm
    # collect(generation=2)
    # Picklist computation assumes that the permutation is a derangement
    picklist = cp.all(paradigm.reshape(-1) <= alternatives, axis=0)
    if verbose >= 2:
        eprint("Picklist identified, now compressing and stacking.")
    alternatives = alternatives[:, picklist]
    nof_orbits = int(np.count_nonzero(picklist))
    orbits = np.empty(shape=(n_nontrivial_perms+1, nof_orbits), dtype=np_dtype)
    orbits[0] = asnumpy(paradigm.reshape(-1)[picklist])
    for i, alternative in tqdm(enumerate(alternatives), total=n_nontrivial_perms):
        orbits[i+1] = asnumpy(alternative)
    # representatives = paradigm.reshape(-1)[picklist,np.newaxis]
    # nonrepresentatives = alternatives.T[picklist]
    return orbits.T

if __name__ == "__main__":
    # Example usage
    tensor_shape = (3, 3, 3)
    C3 = np.array([np.roll(np.arange(3), i) for i in range(3)], dtype=int)
    orbits = identify_orbits(tensor_shape, C3)
    print(orbits)